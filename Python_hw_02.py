# Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки
# типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка
# можно не запрашивать у пользователя, а указать явно, в программе.

print("задание 1")
test_list = ["название", "компьютер", "цена", 20000, "количество", 5, "eд: шт."]
for el in test_list:
    print("{}'s type is {}".format(el, type(el)))

# Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы
# с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем
# месте. Для заполнения списка элементов необходимо использовать функцию input().

print("задание 2")
print("Вводите значения пока не надоест ")
test_list = input().split()
if len(test_list) == 0:
    print("Вы ничего не ввели! Поменять элементы которых нет не получится")
print("Преобразованный список: ")
i = 0
while i < len(test_list) - (len(test_list) % 2):
    t = test_list[i + 1]
    test_list[i + 1] = test_list[i]
    test_list[i] = t
    i += 2
print(test_list)

# Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года
# относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

print("задание 3")
seasons = ("Зима", "Весна", "Лето", "Осень")
n = int(input("Введите номер месяца, а я сообщу что ето за сезон ")) // 3
if 3 >= n >= 1:
    print("Время года етого месяца: {}".format(seasons[n]))
else:
    print("Время года етого месяца: {}".format(seasons[0]))

# Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с
# новой строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10
# букв в слове.

print("задание 4")
word_list = input("Вводите всякие слова пока не надоест ").split()
i = 0
while i < len(word_list):
    print("{}.{}".format(i + 1, word_list[i][:10]))
    i += 1

# Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют
# элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться
# после них.

print("задание 5")
#не возрастающий означает убывающий?
my_list = [7, 5, 3, 3, 2]
print(my_list)
n = int(input("Введите целое число "))
my_list.reverse()
i = 0
while i < len(my_list) and n > my_list[i]:
    i += 1
my_list.insert(i, n)
my_list.reverse()
print(my_list)

# Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый
# кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара
# и словарь с параметрами (характеристиками товара: название, цена, количество, единица
# измерения). Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

print("задание 6")
products = []
info = {"название": "компьютер", "цена": 20000, "количество": 5, "ед": "шт"}
product1 = (1, info)
products.append(product1)
info = {"название": "принтер", "цена": 6000, "количество": 2, "ед": "шт"}
product2 = (2, info)
products.append(product2)
info = {"название": "сканер", "цена": 2000, "количество": 7, "ед": "шт"}
product3 = (3, info)
products.append(product3)

prod_info = input("Введите следующую информацию о товаре через пробел: "
                  "название, цена, кол-во и единицы экземпляра ").split()
info = {"название": prod_info[0], "цена": prod_info[1], "количество": prod_info[2], "ед": prod_info[3]}
product4 = (4, info)
products.append(product4)

names_list = []
price_list = []
quant_list = []
units_list = []

dict_prods = {
    "название": names_list,
    "цена": price_list,
    "количество": quant_list,
    "ед": units_list
}
for i in range(len(products)):
    names_list.append(products[i][1]["название"])
    price_list.append(products[i][1]["цена"])
    quant_list.append(products[i][1]["количество"])
    units_list.append(products[i][1]["ед"])

for el in dict_prods.keys():
    print(el,":",dict_prods.get(el))
